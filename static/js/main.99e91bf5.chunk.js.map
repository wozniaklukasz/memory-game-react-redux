{"version":3,"sources":["state/user/userSlice.ts","consts/urls.ts","state/user/userSelector.ts","pages/Home.tsx","components/Card.tsx","pages/Game.tsx","consts/game.ts","state/scoreBoard/scoreBoardSlice.ts","state/scoreBoard/scoreBoardSelector.ts","pages/ScoreBoard.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["userSlice","createSlice","name","initialState","score","reducers","setName","state","action","payload","setScore","addToScore","actions","Urls","home","game","scoreBoard","selectUser","user","Home","history","useHistory","dispatch","useDispatch","useSelector","className","onSubmit","e","preventDefault","push","value","onChange","event","currentTarget","disabled","type","Card","id","pairId","revealed","guessed","onCardClick","cn","getCardClassName","onClick","style","backgroundImage","revealedTimer","Game","useState","cardsPairNumbers","generator","AvatarGenerator","i","generateRandomAvatar","sort","Math","random","map","generateRandomCardPairs","cards","setCards","revealedCards","setRevealedCards","guessedPairsCounter","setGuessedPairsCounter","handleFinishGame","useCallback","useEffect","changeScore","isGoodGuess","handleOnCardClick","card","prevState","newRevealedCards","length","setTimeout","firstCard","secondCard","areCardsArePaired","newCards","setGuessedPair","clearTimeout","find","scoreBoardSlice","addScore","selectScoreBoard","ScoreBoard","sb","join","App","location","useLocation","cssTransitionProps","key","pathname","timeout","enter","exit","appear","TransitionGroup","component","CSSTransition","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","store","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99e91bf5.chunk.js","sourcesContent":["import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport UserType from '../../types/UserType';\n\nconst initialState: UserType = {\n\tname: '',\n\tscore: 1000,\n}\n\nconst userSlice = createSlice({\n\tname: 'user',\n\tinitialState,\n\treducers: {\n\t\tsetName: (state: UserType, action: PayloadAction<string>) => {\n\t\t\tstate.name = action.payload\n\t\t},\n\t\tsetScore: (state: UserType, action: PayloadAction<number>) => {\n\t\t\tstate.score = action.payload\n\t\t},\n\t\taddToScore: (state: UserType, action: PayloadAction<number>) => {\n\t\t\tstate.score += action.payload\n\t\t},\n\t}\n});\n\nexport const {setName, setScore, addToScore} = userSlice.actions\nexport default userSlice;\n","const Urls = {\n\thome: '/',\n\tgame: '/game',\n\tscoreBoard: '/scoreBoard',\n}\n\nexport default Urls;\n","import {RootState} from '../store';\n\nexport const selectUser = (state: RootState) => state.user;\n","import React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {setName} from '../state/user/userSlice';\nimport Urls from '../consts/urls';\nimport {selectUser} from '../state/user/userSelector';\n\nfunction Home() {\n\tconst history = useHistory();\n\tconst dispatch = useDispatch();\n\n\tconst user = useSelector(selectUser);\n\n\tconst handleUserNameChange = (event: React.FormEvent<HTMLInputElement>) => {\n\t\tdispatch(setName(event.currentTarget.value));\n\t}\n\n\tconst handleOnPlayClick = (e: React.FocusEvent<HTMLFormElement>) => {\n\t\te.preventDefault();\n\t\thistory.push(Urls.game);\n\t}\n\n\treturn (\n\t\t<div className=\"animated-view\">\n\t\t\t<form onSubmit={handleOnPlayClick}>\n\t\t\t\t<label>\n\t\t\t\t\tEnter Your name:\n\t\t\t\t\t<input value={user.name} onChange={handleUserNameChange}/>\n\t\t\t\t</label>\n\t\t\t\t<input disabled={!user.name} type=\"submit\" value=\"Play!\"/>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nexport default Home;\n","import React from 'react';\nimport './Card.scss';\nimport CardType from '../types/CardType';\n\ntype CardProps = CardType & {\n\tonCardClick: (card: CardType) => void,\n\trevealed: boolean,\n}\n\nfunction Card({id, pairId, revealed, guessed, onCardClick}: CardProps) {\n\tconst handleOnCardClick = () => {\n\t\tif (guessed || revealed) return;\n\n\t\tonCardClick({\n\t\t\tid, pairId, guessed\n\t\t});\n\t};\n\n\tconst getCardClassName = (): string => {\n\t\tconst cn = \"card\";\n\n\t\tif (guessed) return `${cn} ${cn}--guessed`;\n\t\tif (revealed) return `${cn} ${cn}--revealed`;\n\n\t\treturn cn;\n\t}\n\n\treturn (\n\t\t<div className=\"card-wrapper\">\n\t\t\t<div\n\t\t\t\tclassName={getCardClassName()}\n\t\t\t\tonClick={handleOnCardClick}>\n\t\t\t\t<div className=\"card-side card-side--front\" style={{backgroundImage: `url(${pairId})`}}/>\n\t\t\t\t<div className=\"card-side card-side--back\"/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useDispatch} from 'react-redux';\nimport Urls from '../consts/urls';\nimport {addToScore} from '../state/user/userSlice';\nimport Card from '../components/Card';\nimport './Game.scss';\nimport CardType from '../types/CardType';\nimport {BAD_GUESS_SCORE, GOOD_GUESS_SCORE, NUMBER_OF_PAIRS, REVEALED_CARDS_TIMEOUT} from '../consts/game';\nimport {AvatarGenerator} from 'random-avatar-generator';\n\nconst generateRandomCardPairs = () => {\n\tconst cardsPairNumbers: any[] = [];\n\tconst generator = new AvatarGenerator();\n\n\tfor (let i = 0; i < NUMBER_OF_PAIRS; i++) {\n\t\tconst pairId = generator.generateRandomAvatar();\n\t\tcardsPairNumbers.push(pairId);\n\t\tcardsPairNumbers.push(pairId);\n\t}\n\n\treturn cardsPairNumbers\n\t\t.sort(() => .5 - Math.random())\n\t\t.map((pairId, id) => {\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tpairId,\n\t\t\t\tguessed: false,\n\t\t\t}\n\t\t});\n}\n\nlet revealedTimer: any = null;\n\nfunction Game() {\n\tconst history = useHistory();\n\tconst dispatch = useDispatch();\n\n\tconst [cards, setCards] = useState<CardType[]>(generateRandomCardPairs());\n\tconst [revealedCards, setRevealedCards] = useState<CardType[]>([]);\n\tconst [guessedPairsCounter, setGuessedPairsCounter] = useState<number>(0);\n\n\tconst handleFinishGame = useCallback(() => {\n\t\thistory.push(Urls.scoreBoard);\n\t}, [history]);\n\n\tuseEffect(() => {\n\t\tif (guessedPairsCounter === NUMBER_OF_PAIRS) {\n\t\t\thandleFinishGame();\n\t\t}\n\t}, [guessedPairsCounter, handleFinishGame]);\n\n\tconst areCardsArePaired = (firstCard: CardType, secondCard: CardType) => firstCard.pairId === secondCard.pairId;\n\n\tconst setGuessedPair = (firstCard: CardType, secondCard: CardType) => {\n\t\tsetCards(prevState => {\n\t\t\tconst newCards = [...prevState];\n\t\t\tnewCards[firstCard.id] = {\n\t\t\t\t...firstCard,\n\t\t\t\tguessed: true,\n\t\t\t};\n\t\t\tnewCards[secondCard.id] = {\n\t\t\t\t...secondCard,\n\t\t\t\tguessed: true,\n\t\t\t};\n\n\t\t\treturn newCards;\n\t\t});\n\n\t\tsetGuessedPairsCounter(prevState => ++prevState);\n\t};\n\n\tconst isCardRevealed = (id: number): boolean => !!revealedCards.find(card => card.id === id);\n\n\tconst changeScore = (isGoodGuess: boolean) => {\n\t\tdispatch(addToScore(isGoodGuess ? GOOD_GUESS_SCORE : BAD_GUESS_SCORE));\n\t}\n\n\tconst handleOnCardClick = (card: CardType) => {\n\t\tsetRevealedCards((prevState => {\n\t\t\tconst newRevealedCards = [...prevState, card];\n\n\t\t\tif (prevState.length === 1) {\n\t\t\t\trevealedTimer = setTimeout(() => {\n\t\t\t\t\tsetRevealedCards([]);\n\t\t\t\t}, REVEALED_CARDS_TIMEOUT);\n\n\t\t\t\tconst firstCard = prevState[0];\n\n\t\t\t\tif (areCardsArePaired(firstCard, card)) {\n\t\t\t\t\tsetGuessedPair(firstCard, card);\n\t\t\t\t\tchangeScore(true);\n\t\t\t\t\treturn [];\n\t\t\t\t} else {\n\t\t\t\t\tchangeScore(false);\n\t\t\t\t\treturn newRevealedCards;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (prevState.length === 2) {\n\t\t\t\tclearTimeout(revealedTimer);\n\t\t\t\treturn [card];\n\t\t\t}\n\n\t\t\tclearTimeout(revealedTimer);\n\t\t\treturn newRevealedCards;\n\t\t}));\n\t}\n\n\tconst renderCardPairs = () => cards.map((card) => (\n\t\t<Card\n\t\t\tkey={card.id}\n\t\t\tid={card.id}\n\t\t\tpairId={card.pairId}\n\t\t\tguessed={card.guessed}\n\t\t\trevealed={isCardRevealed(card.id)}\n\t\t\tonCardClick={handleOnCardClick}\n\t\t/>\n\t));\n\n\treturn (\n\t\t<div className=\"animated-view\">\n\t\t\t<div className=\"cards-wrapper\">\n\t\t\t\t{renderCardPairs()}\n\t\t\t</div>\n\t\t\t<button onClick={handleFinishGame}>Finish</button>\n\t\t</div>\n\t)\n}\n\nexport default Game;\n","export const NUMBER_OF_PAIRS = 6;\nexport const BAD_GUESS_SCORE = -10;\nexport const GOOD_GUESS_SCORE = 50;\nexport const REVEALED_CARDS_TIMEOUT = 1500;","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport UserType from '../../types/UserType';\n\nconst initialState: UserType[] = [];\n\nconst scoreBoardSlice = createSlice({\n\tname: 'scoreBoard',\n\tinitialState,\n\treducers: {\n\t\t// todo: add sort by score\n\t\taddScore: (state: UserType[], action: PayloadAction<UserType>) => {\n\t\t\tstate.push(action.payload);\n\t\t},\n\t}\n});\n\nexport const {addScore} = scoreBoardSlice.actions\nexport default scoreBoardSlice;\n","import {RootState} from '../store';\n\nexport const selectScoreBoard = (state: RootState) => state.scoreBoard;\n","import React, {useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {addScore} from '../state/scoreBoard/scoreBoardSlice';\nimport {selectUser} from '../state/user/userSelector';\nimport {selectScoreBoard} from '../state/scoreBoard/scoreBoardSelector';\nimport UserType from '../types/UserType';\nimport Urls from '../consts/urls';\n\nfunction ScoreBoard() {\n\tconst history = useHistory();\n\tconst dispatch = useDispatch();\n\n\tconst user = useSelector(selectUser);\n\tconst scoreBoard = useSelector(selectScoreBoard);\n\n\tuseEffect(() => {\n\t\tdispatch(addScore(user));\n\t}, [dispatch, user]);\n\n\tconst handleBackToStartClick = () => {\n\t\thistory.push(Urls.home);\n\t}\n\n\treturn (\n\t\t<div className=\"animated-view\">\n\t\t\tScore Board:\n\t\t\t<ol>\n\t\t\t\t{\n\t\t\t\t\tscoreBoard.map((sb: UserType, i: number) => (\n\t\t\t\t\t\t<li key={[sb.name, i].join()}>{sb.name} - {sb.score}p.</li>))\n\t\t\t\t}\n\t\t\t</ol>\n\t\t\t<button onClick={handleBackToStartClick}>Back to start</button>\n\t\t</div>\n\t)\n}\n\nexport default ScoreBoard;\n","import React from 'react';\nimport './App.scss';\nimport {\n\tSwitch,\n\tRoute,\n\tuseLocation\n} from 'react-router-dom';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\nimport Home from './pages/Home';\nimport Game from './pages/Game';\nimport ScoreBoard from './pages/ScoreBoard';\nimport Urls from './consts/urls';\n\nfunction App() {\n\tconst location = useLocation();\n\n\tconst transitionGroupProps = {\n\t\tcomponent: \"main\",\n\t};\n\n\tconst cssTransitionProps = {\n\t\tkey: location.pathname,\n\t\ttimeout: {enter: 600, exit: 600},\n\t\tappear: true,\n\t};\n\n\treturn (\n\t\t<TransitionGroup {...transitionGroupProps}>\n\t\t\t<CSSTransition {...cssTransitionProps}>\n\t\t\t\t<Switch location={location}>\n\t\t\t\t\t<Route exact path={Urls.home}>\n\t\t\t\t\t\t<Home/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path={Urls.game}>\n\t\t\t\t\t\t<Game/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path={Urls.scoreBoard}>\n\t\t\t\t\t\t<ScoreBoard/>\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</CSSTransition>\n\t\t</TransitionGroup>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport userSlice from './user/userSlice';\nimport scoreBoardSlice from './scoreBoard/scoreBoardSlice';\n\nconst reducer = combineReducers({\n\tuser: userSlice.reducer,\n\tscoreBoard: scoreBoardSlice.reducer,\n});\n\nconst middleware = getDefaultMiddleware({\n\tserializableCheck: false,\n});\n\nconst store = configureStore({\n\treducer,\n\tmiddleware,\n});\n\nexport type RootState = ReturnType<typeof reducer>;\n\n// todo: persist\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './style/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './state/store';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<Router>\n\t\t\t<App/>\n\t\t</Router>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}