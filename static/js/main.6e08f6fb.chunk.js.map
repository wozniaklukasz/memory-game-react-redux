{"version":3,"sources":["state/user/userSlice.ts","consts/urls.ts","pages/Home.tsx","components/Card.tsx","pages/Game.tsx","consts/game.ts","state/scoreBoard/scoreBoardSlice.ts","state/user/userSelector.ts","state/scoreBoard/scoreBoardSelector.ts","pages/ScoreBoard.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["userSlice","createSlice","name","initialState","score","reducers","setName","state","action","payload","setScore","addToScore","actions","Urls","home","game","scoreBoard","Home","useState","userName","setUserName","history","useHistory","dispatch","useDispatch","value","onChange","event","currentTarget","disabled","onClick","push","Card","id","pairId","revealed","guessed","onCardClick","className","cn","getCardClassName","style","backgroundImage","Game","cardsPairNumbers","generator","AvatarGenerator","i","generateRandomAvatar","sort","Math","random","map","generateRandomCardPairs","cards","setCards","revealedCards","setRevealedCards","guessedPairsCounter","setGuessedPairsCounter","handleFinishGame","useCallback","useEffect","changeScore","isGoodGuess","handleOnCardClick","card","prevState","newRevealedCards","length","firstCard","secondCard","areCardsArePaired","newCards","setGuessedPair","find","scoreBoardSlice","addScore","selectUser","user","selectScoreBoard","ScoreBoard","useSelector","sb","join","App","exact","path","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","store","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e08f6fb.chunk.js","sourcesContent":["import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport UserType from '../../types/UserType';\n\nconst initialState: UserType = {\n\tname: 'TODO test',\n\tscore: 1000,\n}\n\nconst userSlice = createSlice({\n\tname: 'user',\n\tinitialState,\n\treducers: {\n\t\tsetName: (state: UserType, action: PayloadAction<string>) => {\n\t\t\tstate.name = action.payload\n\t\t},\n\t\tsetScore: (state: UserType, action: PayloadAction<number>) => {\n\t\t\tstate.score = action.payload\n\t\t},\n\t\taddToScore: (state: UserType, action: PayloadAction<number>) => {\n\t\t\tstate.score += action.payload\n\t\t},\n\t}\n});\n\nexport const {setName, setScore, addToScore} = userSlice.actions\nexport default userSlice;\n","const Urls = {\n\thome: '/',\n\tgame: '/game',\n\tscoreBoard: '/scoreBoard',\n}\n\nexport default Urls;\n","import React, {useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useDispatch} from 'react-redux';\nimport {setName} from '../state/user/userSlice';\nimport Urls from '../consts/urls';\n\nfunction Home() {\n\tconst [userName, setUserName] = useState<string>('');\n\tconst history = useHistory();\n\tconst dispatch = useDispatch();\n\n\tconst handleUserNameChange = (event: React.FormEvent<HTMLInputElement>) => {\n\t\tsetUserName(event.currentTarget.value)\n\t}\n\n\tconst handleOnPlayClick = () => {\n\t\tdispatch(setName(userName));\n\t\thistory.push(Urls.game);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\tEnter Your name: <input value={userName} onChange={handleUserNameChange}/>\n\t\t\t<button disabled={!userName} onClick={handleOnPlayClick}>\n\t\t\t\tPlay!\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default Home;\n","import React from 'react';\nimport './Card.scss';\nimport CardType from '../types/CardType';\n\ntype CardProps = CardType & {\n\tonCardClick: (card: CardType) => void,\n\trevealed: boolean,\n}\n\nfunction Card({id, pairId, revealed, guessed, onCardClick}: CardProps) {\n\tconst handleOnCardClick = () => onCardClick({\n\t\tid, pairId, guessed\n\t});\n\n\tconst getCardClassName = (): string => {\n\t\tconst cn = \"card\";\n\n\t\tif (guessed) return `${cn} ${cn}--guessed`;\n\t\tif (revealed) return `${cn} ${cn}--revealed`;\n\n\t\treturn cn;\n\t}\n\n\treturn (\n\t\t<div className=\"card-wrapper\">\n\t\t\t<div className={getCardClassName()} onClick={guessed ? () => {\n\t\t\t} : handleOnCardClick}>\n\t\t\t\t<div className=\"card-side card-side--front\" style={{backgroundImage: `url(${pairId})`}}/>\n\t\t\t\t<div className=\"card-side card-side--back\"/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useDispatch} from 'react-redux';\nimport Urls from '../consts/urls';\nimport {addToScore} from '../state/user/userSlice';\nimport Card from '../components/Card';\nimport './Game.scss';\nimport CardType from '../types/CardType';\nimport {BAD_GUESS_SCORE, GOOD_GUESS_SCORE, NUMBER_OF_PAIRS} from '../consts/game';\nimport {AvatarGenerator} from 'random-avatar-generator';\n\nconst generateRandomCardPairs = () => {\n\tconst cardsPairNumbers: any[] = [];\n\tconst generator = new AvatarGenerator();\n\n\tfor (let i = 0; i < NUMBER_OF_PAIRS; i++) {\n\t\tconst pairId = generator.generateRandomAvatar();\n\t\tcardsPairNumbers.push(pairId);\n\t\tcardsPairNumbers.push(pairId);\n\t}\n\n\treturn cardsPairNumbers\n\t\t.sort(() => .5 - Math.random())\n\t\t.map((pairId, id) => {\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tpairId,\n\t\t\t\tguessed: false,\n\t\t\t}\n\t\t});\n}\n\nfunction Game() {\n\tconst history = useHistory();\n\tconst dispatch = useDispatch();\n\n\tconst [cards, setCards] = useState<CardType[]>(generateRandomCardPairs());\n\tconst [revealedCards, setRevealedCards] = useState<CardType[]>([]);\n\tconst [guessedPairsCounter, setGuessedPairsCounter] = useState<number>(0);\n\n\tconst handleFinishGame = useCallback(() => {\n\t\thistory.push(Urls.scoreBoard);\n\t}, [history]);\n\n\tuseEffect(() => {\n\t\tif (guessedPairsCounter === NUMBER_OF_PAIRS) {\n\t\t\thandleFinishGame();\n\t\t}\n\t}, [guessedPairsCounter, handleFinishGame]);\n\n\tconst areCardsArePaired = (firstCard: CardType, secondCard: CardType) => firstCard.pairId === secondCard.pairId;\n\n\tconst setGuessedPair = (firstCard: CardType, secondCard: CardType) => {\n\t\tsetCards(prevState => {\n\t\t\tconst newCards = [...prevState];\n\t\t\tnewCards[firstCard.id] = {\n\t\t\t\t...firstCard,\n\t\t\t\tguessed: true,\n\t\t\t};\n\t\t\tnewCards[secondCard.id] = {\n\t\t\t\t...secondCard,\n\t\t\t\tguessed: true,\n\t\t\t};\n\n\t\t\treturn newCards;\n\t\t});\n\n\t\tsetGuessedPairsCounter(prevState => ++prevState);\n\t};\n\n\tconst isCardRevealed = (id: number): boolean => !!revealedCards.find(card => card.id === id);\n\n\tconst changeScore = (isGoodGuess: boolean) => {\n\t\tdispatch(addToScore(isGoodGuess ? GOOD_GUESS_SCORE : BAD_GUESS_SCORE));\n\t}\n\n\tconst handleOnCardClick = (card: CardType) => {\n\t\tsetRevealedCards((prevState => {\n\t\t\tconst newRevealedCards = [...prevState, card];\n\n\t\t\tif (prevState.length === 1) {\n\t\t\t\tconst firstCard = prevState[0];\n\n\t\t\t\tif (areCardsArePaired(firstCard, card)) {\n\t\t\t\t\tsetGuessedPair(firstCard, card);\n\t\t\t\t\tchangeScore(true);\n\t\t\t\t\treturn [];\n\t\t\t\t} else {\n\t\t\t\t\tchangeScore(false);\n\t\t\t\t\treturn newRevealedCards;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (prevState.length === 2) {\n\t\t\t\treturn [card];\n\t\t\t}\n\n\t\t\treturn newRevealedCards;\n\t\t}));\n\t}\n\n\tconst renderCardPairs = () => cards.map((card) => (\n\t\t<Card\n\t\t\tkey={card.id}\n\t\t\tid={card.id}\n\t\t\tpairId={card.pairId}\n\t\t\tguessed={card.guessed}\n\t\t\trevealed={isCardRevealed(card.id)}\n\t\t\tonCardClick={handleOnCardClick}\n\t\t/>\n\t));\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"cards-wrapper\">\n\t\t\t\t{renderCardPairs()}\n\t\t\t</div>\n\t\t\t<button onClick={handleFinishGame}>Finish</button>\n\t\t</>\n\t)\n}\n\nexport default Game;\n","export const NUMBER_OF_PAIRS = 4;\nexport const BAD_GUESS_SCORE = -10;\nexport const GOOD_GUESS_SCORE = 50;\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport UserType from '../../types/UserType';\n\nconst initialState: UserType[] = [];\n\nconst scoreBoardSlice = createSlice({\n\tname: 'scoreBoard',\n\tinitialState,\n\treducers: {\n\t\t// todo: add sort by score\n\t\taddScore: (state: UserType[], action: PayloadAction<UserType>) => {\n\t\t\tstate.push(action.payload);\n\t\t},\n\t}\n});\n\nexport const {addScore} = scoreBoardSlice.actions\nexport default scoreBoardSlice;\n","import {RootState} from '../store';\n\nexport const selectUser = (state: RootState) => state.user;\n","import {RootState} from '../store';\n\nexport const selectScoreBoard = (state: RootState) => state.scoreBoard;\n","import React, {useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {addScore} from '../state/scoreBoard/scoreBoardSlice';\nimport {selectUser} from '../state/user/userSelector';\nimport {selectScoreBoard} from '../state/scoreBoard/scoreBoardSelector';\nimport UserType from '../types/UserType';\nimport Urls from '../consts/urls';\n\nfunction ScoreBoard() {\n\tconst history = useHistory();\n\tconst dispatch = useDispatch();\n\n\tconst user = useSelector(selectUser);\n\tconst scoreBoard = useSelector(selectScoreBoard);\n\n\tuseEffect(() => {\n\t\tdispatch(addScore(user));\n\t}, [dispatch, user]);\n\n\tconst handleBackToStartClick = () => {\n\t\thistory.push(Urls.home);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\tScore Board:\n\t\t\t<ol>\n\t\t\t\t{\n\t\t\t\t\tscoreBoard.map((sb: UserType, i: number) => (<li key={[sb.name, i].join()}>{sb.name} - {sb.score}p.</li>))\n\t\t\t\t}\n\t\t\t</ol>\n\t\t\t<button onClick={handleBackToStartClick}>Back to start</button>\n\t\t</div>\n\t)\n}\n\nexport default ScoreBoard;\n","import React from 'react';\nimport './App.scss';\nimport {\n\tSwitch,\n\tRoute,\n\tRedirect\n} from 'react-router-dom';\nimport Home from './pages/Home';\nimport Game from './pages/Game';\nimport ScoreBoard from './pages/ScoreBoard';\nimport Urls from './consts/urls';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"app-content\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path={Urls.home}>\n\t\t\t\t\t\t<Home/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path={Urls.game}>\n\t\t\t\t\t\t<Game/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path={Urls.scoreBoard}>\n\t\t\t\t\t\t<ScoreBoard/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Redirect to={Urls.home} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport userSlice from './user/userSlice';\nimport scoreBoardSlice from './scoreBoard/scoreBoardSlice';\n\nconst reducer = combineReducers({\n\tuser: userSlice.reducer,\n\tscoreBoard: scoreBoardSlice.reducer,\n});\n\nconst middleware = getDefaultMiddleware({\n\tserializableCheck: false,\n});\n\nconst store = configureStore({\n\treducer,\n\tmiddleware,\n});\n\nexport type RootState = ReturnType<typeof reducer>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './style/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './state/store';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<Router>\n\t\t\t<App/>\n\t\t</Router>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}